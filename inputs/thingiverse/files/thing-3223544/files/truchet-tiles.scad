// height of the curvy part as a proportion of the height of the base
h=1; // [0:0.01:5]
// ratio between diammeters of bottom and top
bevel=0.8; // [0:0.01:1]
// length of each edge
size=20; // [0:1:100]
// height of the tile
depth=6; // [0:1:30]
// the number of sides
sides=4; // [4,6,8,12]
// which tile to use (there are 2 squares, 3 hexagons, 6 octagons; 28 dodecagons)
tile=0;

module arc(n,i1,i2) {
    d = 2*(i2-i1);
    if(d==n) {
        an = 360*(i1+i2+1)/2/n;
        p = [cos(an),sin(an)];
        difference() {
            circle(1,$fn=100);
            rotate(an) translate([-2,-1,0]) square(2);
        }
    } else if(d>n) {
        difference() {
            circle(1,$fn=100);
            arc(n,i2,i1+n);
        }
    } else {
        a1 = 360*(i1+.5)/n;
        a2 = 360*(i2+.5)/n;
        inradius = sin(180*(n-2)/n/2);
        p1 = [cos(a1),sin(a1)];
        p2 = [cos(a2),sin(a2)];
        w = p1[0]*p2[1]-p1[1]*p2[0];
        R = cos(180/n);

        p = R/w*[-p1[1]+p2[1], -p2[0]+p1[0]];
        aR = norm(inradius*p1-p);
        
        translate(p) circle(aR,$fn=100);
    }
}

module combine_arcs(n,i1,i2,subarcs) {
    difference() {
        arc(n,i1,i2);
        for(s=subarcs) {
            combine_arcs(n,s[0],s[1],s[2]);
        }
    };
}


tilesets = [[[[0,1,[]],[2,3,[]]],[[0,3,[[1,2,[]]]]]],[[[0,1,[]],[2,3,[]],[4,5,[]]],[[0,1,[]],[2,5,[[3,4,[]]]]],[[0,5,[[1,2,[]],[3,4,[]]]]]],[[[0,1,[]],[2,3,[]],[4,5,[]],[6,7,[]]],[[0,1,[]],[2,3,[]],[4,7,[[5,6,[]]]]],[[0,1,[]],[2,7,[[3,4,[]],[5,6,[]]]]],[[0,1,[]],[2,7,[[3,6,[[4,5,[]]]]]]],[[0,3,[[1,2,[]]]],[4,7,[[5,6,[]]]]],[[0,7,[[1,2,[]],[3,4,[]],[5,6,[]]]]]],[[[0,1,[]],[2,3,[]],[4,5,[]],[6,7,[]],[8,9,[]]],[[0,1,[]],[2,3,[]],[4,5,[]],[6,9,[[7,8,[]]]]],[[0,1,[]],[2,3,[]],[4,9,[[5,6,[]],[7,8,[]]]]],[[0,1,[]],[2,3,[]],[4,9,[[5,8,[[6,7,[]]]]]]],[[0,1,[]],[2,5,[[3,4,[]]]],[6,9,[[7,8,[]]]]],[[0,1,[]],[2,9,[[3,4,[]],[5,6,[]],[7,8,[]]]]],[[0,1,[]],[2,9,[[3,4,[]],[5,8,[[6,7,[]]]]]]],[[0,3,[[1,2,[]]]],[4,9,[[5,6,[]],[7,8,[]]]]],[[0,3,[[1,2,[]]]],[4,9,[[5,8,[[6,7,[]]]]]]],[[0,9,[[1,2,[]],[3,4,[]],[5,6,[]],[7,8,[]]]]]],[[[0,1,[]],[2,3,[]],[4,5,[]],[6,7,[]],[8,9,[]],[10,11,[]]],[[0,1,[]],[2,3,[]],[4,5,[]],[6,7,[]],[8,11,[[9,10,[]]]]],[[0,1,[]],[2,3,[]],[4,5,[]],[6,11,[[7,8,[]],[9,10,[]]]]],[[0,1,[]],[2,3,[]],[4,5,[]],[6,11,[[7,10,[[8,9,[]]]]]]],[[0,1,[]],[2,3,[]],[4,7,[[5,6,[]]]],[8,11,[[9,10,[]]]]],[[0,1,[]],[2,3,[]],[4,11,[[5,6,[]],[7,8,[]],[9,10,[]]]]],[[0,1,[]],[2,3,[]],[4,11,[[5,6,[]],[7,10,[[8,9,[]]]]]]],[[0,1,[]],[2,3,[]],[4,11,[[5,8,[[6,7,[]]]],[9,10,[]]]]],[[0,1,[]],[2,3,[]],[4,11,[[5,10,[[6,7,[]],[8,9,[]]]]]]],[[0,1,[]],[2,3,[]],[4,11,[[5,10,[[6,9,[[7,8,[]]]]]]]]],[[0,1,[]],[2,5,[[3,4,[]]]],[6,7,[]],[8,11,[[9,10,[]]]]],[[0,1,[]],[2,5,[[3,4,[]]]],[6,11,[[7,8,[]],[9,10,[]]]]],[[0,1,[]],[2,5,[[3,4,[]]]],[6,11,[[7,10,[[8,9,[]]]]]]],[[0,1,[]],[2,7,[[3,4,[]],[5,6,[]]]],[8,11,[[9,10,[]]]]],[[0,1,[]],[2,7,[[3,6,[[4,5,[]]]]]],[8,11,[[9,10,[]]]]],[[0,1,[]],[2,11,[[3,4,[]],[5,6,[]],[7,8,[]],[9,10,[]]]]],[[0,1,[]],[2,11,[[3,4,[]],[5,6,[]],[7,10,[[8,9,[]]]]]]],[[0,1,[]],[2,11,[[3,4,[]],[5,8,[[6,7,[]]]],[9,10,[]]]]],[[0,1,[]],[2,11,[[3,4,[]],[5,10,[[6,9,[[7,8,[]]]]]]]]],[[0,1,[]],[2,11,[[3,6,[[4,5,[]]]],[7,10,[[8,9,[]]]]]]],[[0,1,[]],[2,11,[[3,8,[[4,7,[[5,6,[]]]]]],[9,10,[]]]]],[[0,1,[]],[2,11,[[3,10,[[4,9,[[5,6,[]],[7,8,[]]]]]]]]],[[0,1,[]],[2,11,[[3,10,[[4,9,[[5,8,[[6,7,[]]]]]]]]]]],[[0,3,[[1,2,[]]]],[4,7,[[5,6,[]]]],[8,11,[[9,10,[]]]]],[[0,3,[[1,2,[]]]],[4,11,[[5,6,[]],[7,8,[]],[9,10,[]]]]],[[0,3,[[1,2,[]]]],[4,11,[[5,10,[[6,9,[[7,8,[]]]]]]]]],[[0,5,[[1,2,[]],[3,4,[]]]],[6,11,[[7,8,[]],[9,10,[]]]]],[[0,11,[[1,2,[]],[3,4,[]],[5,6,[]],[7,8,[]],[9,10,[]]]]]],[[[0,1,[]],[2,3,[]],[4,5,[]],[6,7,[]],[8,9,[]],[10,11,[]],[12,13,[]]],[[0,1,[]],[2,3,[]],[4,5,[]],[6,7,[]],[8,9,[]],[10,13,[[11,12,[]]]]],[[0,1,[]],[2,3,[]],[4,5,[]],[6,7,[]],[8,13,[[9,10,[]],[11,12,[]]]]],[[0,1,[]],[2,3,[]],[4,5,[]],[6,7,[]],[8,13,[[9,12,[[10,11,[]]]]]]],[[0,1,[]],[2,3,[]],[4,5,[]],[6,9,[[7,8,[]]]],[10,13,[[11,12,[]]]]],[[0,1,[]],[2,3,[]],[4,5,[]],[6,13,[[7,8,[]],[9,10,[]],[11,12,[]]]]],[[0,1,[]],[2,3,[]],[4,5,[]],[6,13,[[7,8,[]],[9,12,[[10,11,[]]]]]]],[[0,1,[]],[2,3,[]],[4,5,[]],[6,13,[[7,10,[[8,9,[]]]],[11,12,[]]]]],[[0,1,[]],[2,3,[]],[4,5,[]],[6,13,[[7,12,[[8,9,[]],[10,11,[]]]]]]],[[0,1,[]],[2,3,[]],[4,5,[]],[6,13,[[7,12,[[8,11,[[9,10,[]]]]]]]]],[[0,1,[]],[2,3,[]],[4,7,[[5,6,[]]]],[8,9,[]],[10,13,[[11,12,[]]]]],[[0,1,[]],[2,3,[]],[4,7,[[5,6,[]]]],[8,13,[[9,10,[]],[11,12,[]]]]],[[0,1,[]],[2,3,[]],[4,7,[[5,6,[]]]],[8,13,[[9,12,[[10,11,[]]]]]]],[[0,1,[]],[2,3,[]],[4,9,[[5,6,[]],[7,8,[]]]],[10,13,[[11,12,[]]]]],[[0,1,[]],[2,3,[]],[4,9,[[5,8,[[6,7,[]]]]]],[10,13,[[11,12,[]]]]],[[0,1,[]],[2,3,[]],[4,13,[[5,6,[]],[7,8,[]],[9,10,[]],[11,12,[]]]]],[[0,1,[]],[2,3,[]],[4,13,[[5,6,[]],[7,8,[]],[9,12,[[10,11,[]]]]]]],[[0,1,[]],[2,3,[]],[4,13,[[5,6,[]],[7,10,[[8,9,[]]]],[11,12,[]]]]],[[0,1,[]],[2,3,[]],[4,13,[[5,6,[]],[7,12,[[8,9,[]],[10,11,[]]]]]]],[[0,1,[]],[2,3,[]],[4,13,[[5,6,[]],[7,12,[[8,11,[[9,10,[]]]]]]]]],[[0,1,[]],[2,3,[]],[4,13,[[5,8,[[6,7,[]]]],[9,10,[]],[11,12,[]]]]],[[0,1,[]],[2,3,[]],[4,13,[[5,8,[[6,7,[]]]],[9,12,[[10,11,[]]]]]]],[[0,1,[]],[2,3,[]],[4,13,[[5,10,[[6,9,[[7,8,[]]]]]],[11,12,[]]]]],[[0,1,[]],[2,5,[[3,4,[]]]],[6,7,[]],[8,13,[[9,10,[]],[11,12,[]]]]],[[0,1,[]],[2,5,[[3,4,[]]]],[6,7,[]],[8,13,[[9,12,[[10,11,[]]]]]]],[[0,1,[]],[2,5,[[3,4,[]]]],[6,9,[[7,8,[]]]],[10,13,[[11,12,[]]]]],[[0,1,[]],[2,5,[[3,4,[]]]],[6,13,[[7,8,[]],[9,10,[]],[11,12,[]]]]],[[0,1,[]],[2,5,[[3,4,[]]]],[6,13,[[7,8,[]],[9,12,[[10,11,[]]]]]]],[[0,1,[]],[2,5,[[3,4,[]]]],[6,13,[[7,10,[[8,9,[]]]],[11,12,[]]]]],[[0,1,[]],[2,5,[[3,4,[]]]],[6,13,[[7,12,[[8,9,[]],[10,11,[]]]]]]],[[0,1,[]],[2,5,[[3,4,[]]]],[6,13,[[7,12,[[8,11,[[9,10,[]]]]]]]]],[[0,1,[]],[2,7,[[3,4,[]],[5,6,[]]]],[8,13,[[9,10,[]],[11,12,[]]]]],[[0,1,[]],[2,7,[[3,6,[[4,5,[]]]]]],[8,13,[[9,10,[]],[11,12,[]]]]],[[0,1,[]],[2,7,[[3,4,[]],[5,6,[]]]],[8,13,[[9,12,[[10,11,[]]]]]]],[[0,1,[]],[2,7,[[3,6,[[4,5,[]]]]]],[8,13,[[9,12,[[10,11,[]]]]]]],[[0,1,[]],[2,9,[[3,4,[]],[5,6,[]],[7,8,[]]]],[10,13,[[11,12,[]]]]],[[0,1,[]],[2,9,[[3,4,[]],[5,8,[[6,7,[]]]]]],[10,13,[[11,12,[]]]]],[[0,1,[]],[2,9,[[3,6,[[4,5,[]]]],[7,8,[]]]],[10,13,[[11,12,[]]]]],[[0,1,[]],[2,9,[[3,8,[[4,5,[]],[6,7,[]]]]]],[10,13,[[11,12,[]]]]],[[0,1,[]],[2,9,[[3,8,[[4,7,[[5,6,[]]]]]]]],[10,13,[[11,12,[]]]]],[[0,1,[]],[2,13,[[3,4,[]],[5,6,[]],[7,8,[]],[9,10,[]],[11,12,[]]]]],[[0,1,[]],[2,13,[[3,4,[]],[5,6,[]],[7,8,[]],[9,12,[[10,11,[]]]]]]],[[0,1,[]],[2,13,[[3,4,[]],[5,6,[]],[7,10,[[8,9,[]]]],[11,12,[]]]]],[[0,1,[]],[2,13,[[3,4,[]],[5,6,[]],[7,12,[[8,11,[[9,10,[]]]]]]]]],[[0,1,[]],[2,13,[[3,4,[]],[5,8,[[6,7,[]]]],[9,12,[[10,11,[]]]]]]],[[0,1,[]],[2,13,[[3,4,[]],[5,10,[[6,9,[[7,8,[]]]]]],[11,12,[]]]]],[[0,1,[]],[2,13,[[3,6,[[4,5,[]]]],[7,12,[[8,11,[[9,10,[]]]]]]]]],[[0,1,[]],[2,13,[[3,8,[[4,7,[[5,6,[]]]]]],[9,10,[]],[11,12,[]]]]],[[0,1,[]],[2,13,[[3,12,[[4,7,[[5,6,[]]]],[8,11,[[9,10,[]]]]]]]]],[[0,1,[]],[2,13,[[3,12,[[4,11,[[5,6,[]],[7,8,[]],[9,10,[]]]]]]]]],[[0,1,[]],[2,13,[[3,12,[[4,11,[[5,6,[]],[7,10,[[8,9,[]]]]]]]]]]],[[0,1,[]],[2,13,[[3,12,[[4,11,[[5,8,[[6,7,[]]]],[9,10,[]]]]]]]]],[[0,1,[]],[2,13,[[3,12,[[4,11,[[5,10,[[6,7,[]],[8,9,[]]]]]]]]]]],[[0,1,[]],[2,13,[[3,12,[[4,11,[[5,10,[[6,9,[[7,8,[]]]]]]]]]]]]],[[0,3,[[1,2,[]]]],[4,7,[[5,6,[]]]],[8,13,[[9,10,[]],[11,12,[]]]]],[[0,3,[[1,2,[]]]],[4,13,[[5,6,[]],[7,8,[]],[9,10,[]],[11,12,[]]]]],[[0,3,[[1,2,[]]]],[4,13,[[5,6,[]],[7,12,[[8,11,[[9,10,[]]]]]]]]],[[0,5,[[1,2,[]],[3,4,[]]]],[6,13,[[7,8,[]],[9,10,[]],[11,12,[]]]]],[[0,5,[[1,2,[]],[3,4,[]]]],[6,13,[[7,8,[]],[9,12,[[10,11,[]]]]]]],[[0,5,[[1,2,[]],[3,4,[]]]],[6,13,[[7,10,[[8,9,[]]]],[11,12,[]]]]],[[0,5,[[1,2,[]],[3,4,[]]]],[6,13,[[7,12,[[8,9,[]],[10,11,[]]]]]]],[[0,5,[[1,2,[]],[3,4,[]]]],[6,13,[[7,12,[[8,11,[[9,10,[]]]]]]]]],[[0,13,[[1,2,[]],[3,4,[]],[5,6,[]],[7,8,[]],[9,10,[]],[11,12,[]]]]]]]
;

echo(len(tilesets));
for(i=[0:len(tilesets)]) {
    echo(i,len(tilesets[i]));
}

module make(set,tile) {
    n = 2*set+4;
    arcs = tilesets[set][tile];
    points = [for (i = [0:n]) [cos(360*i/n),sin(360*i/n)]];
    rotate(180/n) scale([radius(n),radius(n),1]) union() {
        difference() {
            translate([0,0,1]) mirror([0,0,1]) linear_extrude(1,scale=bevel) polygon(points);
        }
        translate([0,0,1]) linear_extrude(h) difference() {
            polygon(points);
            for(a=arcs) {
                combine_arcs(n,a[0],a[1],a[2]);
            }
        };
    }
}

function radius(n) = 1/(2*sin(180/n));

set=(sides-4)/2; 
scale([size,size,depth/(1+h)]) make(set,tile);
