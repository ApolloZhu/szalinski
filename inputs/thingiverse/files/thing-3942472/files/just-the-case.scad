/////////
//setup//
/////////

// use this to change the space between the holders for x axis
xSpace = 30;

// the number of holders in the x dimention
xHolders = 2;

// use this to change the space between the holders for z axis
zSpace = 30;

// the number of holders in the z dimention
zHolders = 1;

// the tolerance for holding mounts
holderTolerance = .3;

// the lenth of drawers
lenth = 100;

// for tolerance of printer for wall
wallTolerance = 1;

// the thickness of case wall
caseWallThickness = 2;

// if you want the holders to be auto generated
autoGeneratedHolder = 1;

// with of holder
hWith = 5;

//with of side holders
sHWith = 5;

// the thickness of the backplate
bPThickness = 1;

// the thickness for the Top Holder Plate
TopHolderPlateThickness = 1;

// the overlap of Top Holder Plate
TopHolderPlateOverlap = 5;

// the thickness for the right Holder Plate
rightHolderPlateThickness = 1;

// the overlap of right Holder Plate
rightHolderPlateOverlap = 5;




/////////////
//maincode://
/////////////

xlenthDeterminer = xSpace*xHolders;
zlenthDeterminer = zSpace*zHolders;

/////////
//shell//
/////////

module shell(){

    cube1 = [ 
    
        xlenthDeterminer,
        lenth,
        zlenthDeterminer
    
    ];

    cube2 = [
    
        xlenthDeterminer - caseWallThickness * 2 ,
        lenth,
        zlenthDeterminer - caseWallThickness * 2
    
    ];

    difference(){

        cube(cube1 , center = true);
        cube(cube2 , center = true);
        
    }
    
    translate([ 0 , (lenth / 2) + (bPThickness / 2)  , 0]){
    
        cube([xlenthDeterminer , bPThickness , zlenthDeterminer] , center = true);

    }
}


//////////
//holder//
////////// 

    hThickness = caseWallThickness / 2 ;

module holder(holderTolerance1 , with){
    
    holderPart1 = [
    
        hThickness + holderTolerance1,
        lenth,
        caseWallThickness
    
    ];
    
    holderPart2 = [
    
        with + holderTolerance1 ,
        lenth,
        hThickness
    
    ];
    
    
       
        cube(holderPart1, center = true);    

        translate([ 0 , 0 , -1 * (hThickness / 2) ]){
                
            cube(holderPart2, center = true);
             
        }
    }
    
    module rotatedHolder(holderTolerance2 , with2){
        
        rotate(a = [0,90,0]){
            
            holder(holderTolerance2 , with2);
            
            }
        
        }
    
    module holderTop1PT( x ){
    
        topHolderOffset = (zlenthDeterminer / 2) - (caseWallThickness / 2);
        
        translate([ x , 0 , topHolderOffset ]){
            
            holder(holderTolerance , hWith);
            
        }   
    }
    
    module holderBottom1PT( x ){
    
        bottomHolderOffset = -(((zlenthDeterminer / 2) + caseWallThickness) - (caseWallThickness / 2));
        
        translate([ x , 0 , bottomHolderOffset ]){
            
            holder( 0 , hWith);
            
        }   
    }
    
    module holderRight1PT(z){
        
        rightHolderOffset =  (xlenthDeterminer / 2) - (caseWallThickness / 2);
        
        translate([ rightHolderOffset , 0 , z ]){
            
            rotatedHolder( holderTolerance , sHWith);
            
        }   
    }
        
    module holderLeft1PT(z){
        
        leftHolderOffset =  -((xlenthDeterminer / 2) + (caseWallThickness/2));
        
        translate([ leftHolderOffset , 0 , z ]){
            
            rotatedHolder( 0 , sHWith);
            
        }
    }   
    
    module topHolderPlate(x){
        
        topHolderOffset = (zlenthDeterminer / 2) - (caseWallThickness +  TopHolderPlateThickness / 2);
        
        topPlateDimentions = [
        
        hWith + TopHolderPlateOverlap, 
        lenth, 
        TopHolderPlateThickness
        
        ];
        
        translate([ x , 0 , topHolderOffset ]){
            
            cube(topPlateDimentions, center = true);
            
        }   
    }
        
     module rightHolderPlate(z){
        
        rightHolderOffset = (xlenthDeterminer / 2) - (caseWallThickness +  rightHolderPlateThickness / 2);
         
        rightPlateDimentions = [
            
            rightHolderPlateThickness,
            lenth,
            sHWith + rightHolderPlateOverlap
            
            ];
         
        translate([ rightHolderOffset , 0 , z ]){
            
            
            
            cube(rightPlateDimentions, center = true);
            
        }   
    }
        
    module topHolderPlateMain(){
        
        for(i = [0 : 1 : xHolders - 1 ]){
            
            xHolderOffset = -(xlenthDeterminer / 2) + (i * xSpace) + (xSpace / 2); 
            topHolderPlate(xHolderOffset);
            
        }
        
    }
        
    module rightHolderPlateMain(){
        
        for(i = [0 : 1 : zHolders - 1 ]){
            
            zHolderOffset = -(zlenthDeterminer / 2) + (i * zSpace) + (zSpace / 2); 
            rightHolderPlate(zHolderOffset);
            
        }
        
    }

    module holderTopMain(){

        for(i = [0 : 1 : xHolders - 1 ]){
            
            xHolderOffset = -(xlenthDeterminer / 2) + (i * xSpace) + (xSpace / 2); 
            holderTop1PT(xHolderOffset);

            
        }
    }
    
    module holderBottomMain(){

        for(i = [0 : 1 : xHolders - 1 ]){
            
            xHolderOffset = -(xlenthDeterminer / 2) + (i * xSpace) + (xSpace / 2); 
            holderBottom1PT(xHolderOffset);
            
        }
    }
    
    module holderRightMain(){
        
        for(i = [0 : 1 : zHolders - 1 ]){
            
            zHolderOffset = -(zlenthDeterminer / 2) + (i * zSpace) + (zSpace / 2); 
            holderRight1PT(zHolderOffset);
        
        }
    }
    
    module holderLeftMain(){
        
        for(i = [0 : 1 : zHolders - 1 ]){
            
            zHolderOffset = -(zlenthDeterminer / 2) + (i * zSpace) + (zSpace / 2); 
            holderLeft1PT(zHolderOffset);
        
        }
    }
   
    module holderTopAndRight(){
        
            holderTopMain();
            holderRightMain();
        
        }
    
    module mainCase(){
    
        difference(){
            
            shell();
            holderTopAndRight();
                
            }
        
            

        holderBottomMain(); 
        topHolderPlateMain();
        holderLeftMain();
        rightHolderPlateMain();
    
    }
    
    mainCase();
    
  